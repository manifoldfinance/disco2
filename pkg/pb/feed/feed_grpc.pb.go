// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/feed.proto

package feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Feed_AddFeedItem_FullMethodName      = "/Feed/AddFeedItem"
	Feed_ListFeedItems_FullMethodName    = "/Feed/ListFeedItems"
	Feed_GetFeedItemsByID_FullMethodName = "/Feed/GetFeedItemsByID"
)

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedClient interface {
	AddFeedItem(ctx context.Context, in *AddFeedItemRequest, opts ...grpc.CallOption) (*FeedItem, error)
	ListFeedItems(ctx context.Context, in *ListFeedItemsRequest, opts ...grpc.CallOption) (*FeedItems, error)
	GetFeedItemsByID(ctx context.Context, in *FeedItemIDs, opts ...grpc.CallOption) (*FeedItems, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) AddFeedItem(ctx context.Context, in *AddFeedItemRequest, opts ...grpc.CallOption) (*FeedItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedItem)
	err := c.cc.Invoke(ctx, Feed_AddFeedItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListFeedItems(ctx context.Context, in *ListFeedItemsRequest, opts ...grpc.CallOption) (*FeedItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedItems)
	err := c.cc.Invoke(ctx, Feed_ListFeedItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetFeedItemsByID(ctx context.Context, in *FeedItemIDs, opts ...grpc.CallOption) (*FeedItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedItems)
	err := c.cc.Invoke(ctx, Feed_GetFeedItemsByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility.
type FeedServer interface {
	AddFeedItem(context.Context, *AddFeedItemRequest) (*FeedItem, error)
	ListFeedItems(context.Context, *ListFeedItemsRequest) (*FeedItems, error)
	GetFeedItemsByID(context.Context, *FeedItemIDs) (*FeedItems, error)
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedServer struct{}

func (UnimplementedFeedServer) AddFeedItem(context.Context, *AddFeedItemRequest) (*FeedItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeedItem not implemented")
}
func (UnimplementedFeedServer) ListFeedItems(context.Context, *ListFeedItemsRequest) (*FeedItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItems not implemented")
}
func (UnimplementedFeedServer) GetFeedItemsByID(context.Context, *FeedItemIDs) (*FeedItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedItemsByID not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}
func (UnimplementedFeedServer) testEmbeddedByValue()              {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	// If the following call pancis, it indicates UnimplementedFeedServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Feed_ServiceDesc, srv)
}

func _Feed_AddFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).AddFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_AddFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).AddFeedItem(ctx, req.(*AddFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListFeedItems(ctx, req.(*ListFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetFeedItemsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedItemIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetFeedItemsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_GetFeedItemsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetFeedItemsByID(ctx, req.(*FeedItemIDs))
	}
	return interceptor(ctx, in, info, handler)
}

// Feed_ServiceDesc is the grpc.ServiceDesc for Feed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFeedItem",
			Handler:    _Feed_AddFeedItem_Handler,
		},
		{
			MethodName: "ListFeedItems",
			Handler:    _Feed_ListFeedItems_Handler,
		},
		{
			MethodName: "GetFeedItemsByID",
			Handler:    _Feed_GetFeedItemsByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/feed.proto",
}
