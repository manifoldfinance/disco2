// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/disco_payment_gateway.proto

package disco_payment_gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiscoPaymentGateway_CreateSession_FullMethodName                  = "/DiscoPaymentGateway/CreateSession"
	DiscoPaymentGateway_GetSessionById_FullMethodName                 = "/DiscoPaymentGateway/GetSessionById"
	DiscoPaymentGateway_ListSessions_FullMethodName                   = "/DiscoPaymentGateway/ListSessions"
	DiscoPaymentGateway_GetSessionByPaymentTransaction_FullMethodName = "/DiscoPaymentGateway/GetSessionByPaymentTransaction"
	DiscoPaymentGateway_CreateWallet_FullMethodName                   = "/DiscoPaymentGateway/CreateWallet"
	DiscoPaymentGateway_EstimatePaymentAmount_FullMethodName          = "/DiscoPaymentGateway/EstimatePaymentAmount"
)

// DiscoPaymentGatewayClient is the client API for DiscoPaymentGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoPaymentGatewayClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	GetSessionById(ctx context.Context, in *GetSessionByIdRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	GetSessionByPaymentTransaction(ctx context.Context, in *GetSessionByPaymentTransactionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	EstimatePaymentAmount(ctx context.Context, in *EstimatePaymentAmountRequest, opts ...grpc.CallOption) (*EstimatePaymentAmountResponse, error)
}

type discoPaymentGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoPaymentGatewayClient(cc grpc.ClientConnInterface) DiscoPaymentGatewayClient {
	return &discoPaymentGatewayClient{cc}
}

func (c *discoPaymentGatewayClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, DiscoPaymentGateway_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoPaymentGatewayClient) GetSessionById(ctx context.Context, in *GetSessionByIdRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, DiscoPaymentGateway_GetSessionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoPaymentGatewayClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, DiscoPaymentGateway_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoPaymentGatewayClient) GetSessionByPaymentTransaction(ctx context.Context, in *GetSessionByPaymentTransactionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, DiscoPaymentGateway_GetSessionByPaymentTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoPaymentGatewayClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, DiscoPaymentGateway_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoPaymentGatewayClient) EstimatePaymentAmount(ctx context.Context, in *EstimatePaymentAmountRequest, opts ...grpc.CallOption) (*EstimatePaymentAmountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimatePaymentAmountResponse)
	err := c.cc.Invoke(ctx, DiscoPaymentGateway_EstimatePaymentAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoPaymentGatewayServer is the server API for DiscoPaymentGateway service.
// All implementations must embed UnimplementedDiscoPaymentGatewayServer
// for forward compatibility.
type DiscoPaymentGatewayServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	GetSessionById(context.Context, *GetSessionByIdRequest) (*GetSessionResponse, error)
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	GetSessionByPaymentTransaction(context.Context, *GetSessionByPaymentTransactionRequest) (*GetSessionResponse, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	EstimatePaymentAmount(context.Context, *EstimatePaymentAmountRequest) (*EstimatePaymentAmountResponse, error)
	mustEmbedUnimplementedDiscoPaymentGatewayServer()
}

// UnimplementedDiscoPaymentGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiscoPaymentGatewayServer struct{}

func (UnimplementedDiscoPaymentGatewayServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedDiscoPaymentGatewayServer) GetSessionById(context.Context, *GetSessionByIdRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionById not implemented")
}
func (UnimplementedDiscoPaymentGatewayServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedDiscoPaymentGatewayServer) GetSessionByPaymentTransaction(context.Context, *GetSessionByPaymentTransactionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionByPaymentTransaction not implemented")
}
func (UnimplementedDiscoPaymentGatewayServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedDiscoPaymentGatewayServer) EstimatePaymentAmount(context.Context, *EstimatePaymentAmountRequest) (*EstimatePaymentAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatePaymentAmount not implemented")
}
func (UnimplementedDiscoPaymentGatewayServer) mustEmbedUnimplementedDiscoPaymentGatewayServer() {}
func (UnimplementedDiscoPaymentGatewayServer) testEmbeddedByValue()                             {}

// UnsafeDiscoPaymentGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoPaymentGatewayServer will
// result in compilation errors.
type UnsafeDiscoPaymentGatewayServer interface {
	mustEmbedUnimplementedDiscoPaymentGatewayServer()
}

func RegisterDiscoPaymentGatewayServer(s grpc.ServiceRegistrar, srv DiscoPaymentGatewayServer) {
	// If the following call pancis, it indicates UnimplementedDiscoPaymentGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiscoPaymentGateway_ServiceDesc, srv)
}

func _DiscoPaymentGateway_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoPaymentGatewayServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoPaymentGateway_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoPaymentGatewayServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoPaymentGateway_GetSessionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoPaymentGatewayServer).GetSessionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoPaymentGateway_GetSessionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoPaymentGatewayServer).GetSessionById(ctx, req.(*GetSessionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoPaymentGateway_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoPaymentGatewayServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoPaymentGateway_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoPaymentGatewayServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoPaymentGateway_GetSessionByPaymentTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByPaymentTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoPaymentGatewayServer).GetSessionByPaymentTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoPaymentGateway_GetSessionByPaymentTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoPaymentGatewayServer).GetSessionByPaymentTransaction(ctx, req.(*GetSessionByPaymentTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoPaymentGateway_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoPaymentGatewayServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoPaymentGateway_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoPaymentGatewayServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoPaymentGateway_EstimatePaymentAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimatePaymentAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoPaymentGatewayServer).EstimatePaymentAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoPaymentGateway_EstimatePaymentAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoPaymentGatewayServer).EstimatePaymentAmount(ctx, req.(*EstimatePaymentAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscoPaymentGateway_ServiceDesc is the grpc.ServiceDesc for DiscoPaymentGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscoPaymentGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DiscoPaymentGateway",
	HandlerType: (*DiscoPaymentGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _DiscoPaymentGateway_CreateSession_Handler,
		},
		{
			MethodName: "GetSessionById",
			Handler:    _DiscoPaymentGateway_GetSessionById_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _DiscoPaymentGateway_ListSessions_Handler,
		},
		{
			MethodName: "GetSessionByPaymentTransaction",
			Handler:    _DiscoPaymentGateway_GetSessionByPaymentTransaction_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _DiscoPaymentGateway_CreateWallet_Handler,
		},
		{
			MethodName: "EstimatePaymentAmount",
			Handler:    _DiscoPaymentGateway_EstimatePaymentAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/disco_payment_gateway.proto",
}
