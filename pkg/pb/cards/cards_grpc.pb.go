// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/cards.proto

package cards

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cards_CreateCard_FullMethodName       = "/Cards/CreateCard"
	Cards_GetCard_FullMethodName          = "/Cards/GetCard"
	Cards_UpdateCardStatus_FullMethodName = "/Cards/UpdateCardStatus"
)

// CardsClient is the client API for Cards service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardsClient interface {
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*Card, error)
	GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*Card, error)
	UpdateCardStatus(ctx context.Context, in *UpdateCardStatusRequest, opts ...grpc.CallOption) (*Card, error)
}

type cardsClient struct {
	cc grpc.ClientConnInterface
}

func NewCardsClient(cc grpc.ClientConnInterface) CardsClient {
	return &cardsClient{cc}
}

func (c *cardsClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, Cards_CreateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, Cards_GetCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) UpdateCardStatus(ctx context.Context, in *UpdateCardStatusRequest, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, Cards_UpdateCardStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardsServer is the server API for Cards service.
// All implementations must embed UnimplementedCardsServer
// for forward compatibility.
type CardsServer interface {
	CreateCard(context.Context, *CreateCardRequest) (*Card, error)
	GetCard(context.Context, *GetCardRequest) (*Card, error)
	UpdateCardStatus(context.Context, *UpdateCardStatusRequest) (*Card, error)
	mustEmbedUnimplementedCardsServer()
}

// UnimplementedCardsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardsServer struct{}

func (UnimplementedCardsServer) CreateCard(context.Context, *CreateCardRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedCardsServer) GetCard(context.Context, *GetCardRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedCardsServer) UpdateCardStatus(context.Context, *UpdateCardStatusRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCardStatus not implemented")
}
func (UnimplementedCardsServer) mustEmbedUnimplementedCardsServer() {}
func (UnimplementedCardsServer) testEmbeddedByValue()               {}

// UnsafeCardsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardsServer will
// result in compilation errors.
type UnsafeCardsServer interface {
	mustEmbedUnimplementedCardsServer()
}

func RegisterCardsServer(s grpc.ServiceRegistrar, srv CardsServer) {
	// If the following call pancis, it indicates UnimplementedCardsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cards_ServiceDesc, srv)
}

func _Cards_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_CreateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).GetCard(ctx, req.(*GetCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_UpdateCardStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).UpdateCardStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_UpdateCardStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).UpdateCardStatus(ctx, req.(*UpdateCardStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cards_ServiceDesc is the grpc.ServiceDesc for Cards service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cards_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cards",
	HandlerType: (*CardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCard",
			Handler:    _Cards_CreateCard_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _Cards_GetCard_Handler,
		},
		{
			MethodName: "UpdateCardStatus",
			Handler:    _Cards_UpdateCardStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cards.proto",
}
